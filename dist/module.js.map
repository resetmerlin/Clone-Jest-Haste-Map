{"mappings":";;;;;;AAyBA,MAAM,wCAAkB;AAExB,MAAM,uCAAiB,CAAA,GAAA,mBAAW;IAIhC,aAAa,OAAO,OAAgB,EAAE;QACpC,MAAM,WAAW,IAAI,+BAAS;QAE9B,OAAO;IACT;IAEA,YAAoB,OAAgB,CAAE;QACpC,KAAK;QACL,IAAI,CAAC,QAAQ,GAAG;YACd,YAAY,QAAQ,UAAU;YAC9B,YAAY,QAAQ,UAAU;YAC9B,MAAM,QAAQ,IAAI;YAClB,WAAW,QAAQ,SAAS;YAC5B,SAAS,QAAQ,OAAO;YACxB,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,KAAK;QAC5C;QAEA,IAAI,CAAC,QAAQ,GAAG,QAAQ,OAAO,IAAI,WAAW,OAAO;QAErD,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI,OAAO;IAC3C;IAEA,MAAc,eAAe,OAAgB,EAAiB;QAC5D;;;;;;;;;;;;;KAaC,GACD,MAAM,cAAc,CAAA,GAAA,0DAAS,EAAE,QAC5B,MAAM,CAAC,QAAQ,OAAO,EACtB,MAAM,CAAC,OACP,KAAK,CAAC,GAAG;QAEZ,IAAI,gBAAgB;QACpB,IAAI,0BAA0B;IAChC;IAEA,iBAAiB,aAAyB,EAAE;QAC1C,OAAO;eAAI,IAAI,IAAI;SAAe;IACpC;AACF;AAEA,MAAM,wCAAkB;IACtB,YAAY;QAAC;KAAK;IAClB,YAAY,CAAA,GAAA,WAAG,IAAI,MAAM;IACzB,MAAM;IACN,WAAW,EAAE;IACb,SAAS;IACT,OAAO;QAAC;KAAI;AACd;AAEA,QAAQ,GAAG,CAAC,+BAAS,MAAM,CAAC","sources":["src/index.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport { cpus } from \"os\";\nimport { createHash } from \"crypto\";\n\ntype Options = {\n  console?: Console;\n  extensions: Array<string>;\n  ignorePattern?: RegExp;\n  maxWorkers: number;\n  platforms: Array<string>;\n  rootDir: string;\n  roots: Array<string>;\n  name?: string;\n};\n\ntype InternalOptions = {\n  extensions: Array<string>;\n  ignorePattern?: RegExp;\n  maxWorkers: number;\n  platforms: Array<string>;\n  rootDir: string;\n  roots: Array<string>;\n  name?: string;\n};\n\nconst VCS_DIRECTORIES = \"/\\\\.git/|/\\\\.hg/|/\\\\.sl/\";\n\nclass HasteMap extends EventEmitter {\n  private readonly _options: InternalOptions;\n  private readonly _console: Console;\n\n  static async create(options: Options) {\n    const hasteMap = new HasteMap(options);\n\n    return hasteMap;\n  }\n\n  private constructor(options: Options) {\n    super();\n    this._options = {\n      extensions: options.extensions,\n      maxWorkers: options.maxWorkers,\n      name: options.name,\n      platforms: options.platforms,\n      rootDir: options.rootDir,\n      roots: this.removeDuplicates(options.roots),\n    };\n\n    this._console = options.console || globalThis.console;\n\n    this._options.ignorePattern = new RegExp(VCS_DIRECTORIES);\n  }\n\n  private async setupCachePath(options: Options): Promise<void> {\n    /**\n     * SHA-1 is a cryptographic hash function that takes an input (or message) and returns a fixed-size,\n     * 160-bit (20-byte) hash value. It's commonly represented as a hexadecimal number.\n     *\n     * SHA-1 was once a popular cryptographic hash function used in various security protocols, such as TLS, SSL, and digital signatures.\n     * However, it is now considered weak and insecure due to vulnerabilities that allow attackers to perform collision attacks (where two different inputs produce the same hash).\n     *\n     * But SHA-1 is relatively fast to compute compared to more secure hash functions like SHA-256 or SHA-512.\n     * Jest Haste Map uses SHA-1 to generate hashes of file contents or paths. This hashing is done frequently and needs to be as performant as possible. Since SHA-1 is faster,\n     * it reduces the overhead involved in computing these hashes, allowing Jest to efficiently detect file changes and keep its internal state updated.\n     *\n     * Jest Haste Map uses SHA-1 hashes mainly to create unique identifiers for files.\n     * The primary goal here is to quickly and uniquely represent a file's content or path, not to secure data against cryptographic attacks\n     */\n    const rootDirHash = createHash(\"sha1\")\n      .update(options.rootDir)\n      .digest(\"hex\")\n      .slice(0, 32);\n\n    let hasteImplHash = \"\";\n    let dependencyExtractorHash = \"\";\n  }\n\n  removeDuplicates(unstableLists: Array<any>) {\n    return [...new Set(unstableLists)];\n  }\n}\n\nconst hasteMapOptions = {\n  extensions: [\"js\"],\n  maxWorkers: cpus().length,\n  name: \"jest-bundler\",\n  platforms: [],\n  rootDir: \"/\",\n  roots: [\"/\"],\n};\n\nconsole.log(HasteMap.create(hasteMapOptions));\n"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}